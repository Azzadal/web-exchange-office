package com.javaspring.proj.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import lombok.Data;

import javax.persistence.*;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Objects;
import java.util.Set;

@Data
@Entity
@Table(name = "usr", uniqueConstraints =
        {
                @UniqueConstraint(columnNames = "id"),
                @UniqueConstraint(columnNames = "login")
        })
public class User extends EntityIdentifier {
    private String username;
    private String login;
    @JsonIgnore
    private String password;
    private boolean active;
    @ManyToOne
    @JoinColumn(name = "role_id")
    private Role role;
    private BigDecimal cash = new BigDecimal(50000);

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof User)) return false;
        User user = (User) o;
        return isActive() == user.isActive() &&
                Objects.equals(role.getId(), user.getId()) &&
                Objects.equals(getUsername(), user.getUsername()) &&
                Objects.equals(getPassword(), user.getPassword()) &&
                Objects.equals(getCash(), user.getCash()) &&
                Objects.equals(getRole(), user.getRole());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId(), getUsername(), getPassword(), isActive(), getCash(), getRole());
    }
}
